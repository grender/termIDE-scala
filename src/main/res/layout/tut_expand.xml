<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="fill_parent"
              android:layout_height="fill_parent"
              android:layout_weight="1"
              android:orientation="vertical" >

    <TextView android:id="@+id/help_title"
                  android:gravity="center"
                  android:layout_width="fill_parent"
                  android:layout_height="wrap_content"
                  android:paddingTop="10dip"
                  android:paddingBottom="10dip"
                  android:textSize="22dip"
                  android:text="Compiling C Apps"/>

    <ScrollView android:id="@+id/help_scrollview"
                android:layout_height="fill_parent"
                android:layout_width="fill_parent">

    <TextView android:id="@+id/mixer_deck1_text"
                  android:layout_width="fill_parent"
                  android:layout_height="fill_parent"
                  android:text=
"
Terminal IDE uses the command line with many native C apps. There are DEFINITELY more 
apps that some of you might want.\n
\n
You can of course add C applications you have compiled yourself to Terminal IDE. Just put them in the ~/bin folder.. like your Java / Shell scripts. \n
\n
No problem.. easy.. right?..  WRONG!! Well, it's not easy anyway..\n
\n
Welcome to :\n
\n
'The Dark Arts of Android Cross-Compilation..'\n
\n
Anyone who has tried cross-compiling for android will know of what I speak..\n
\n
The main issues that  arise are : \n
  1) ROOTED users may operate differently, but you need to set the application up, and all of it's configuration files, so that it runs from inside Terminal IDE's non-rooted memory space ie no /etc folder. This may involve $HOME config files, ENVIRONMENT variables, compiling the app with HARD-CODED path names, to mention a few.\n
  2) In my experience, STATICALLY linking the apps greatly improves their ability to run on many different android devices. If you ONLY want it for your device, you can target it more precisely and build a dynamically linked binary.\n
\n
'BUT dynamically linked binaries don't work on android', I hear you cry..\n
\n
The reason dynamically linked binaries don't work is because Android doesn't follow
Unix file system conventions. The dynamic linker is named /system/bin/linker, not /bin/ld.so as usual.\n
\n
So you just have to tell your ld about it:\n
For an imaginary hello.c file\n
\n
arm-none-linux-gnueabi-gcc -c -o hello.o hello.c\n
arm-none-linux-gnueabi-ld -rpath . hello.o libc.so -I /system/bin/ linker -o hello\n
\n
Now you get a dynamically linked executable 'hello' which works on Android.\n
\n
  3) Even if you get the app to compile, there is still a chance it will just seg-fault when you run it on your device..
  I'm looking at you 'svn'..and you 'qemu'.. :-( ..plus, I have a fully working version of Bochs, but it is sooo sloowww..\n
\n
The three build systems I have used to compile all the apps in Terminal IDE are : \n
   1) Android NDK - the preferred option really, but the least compatible. I use the create-standalone-toolchain option mainly, but 'vim' is actually compiled using a proper Android.mk NDK project. It's the only one..\n
   2) CodeSourcery ARM toolchain - works well, but you MUST statically link your apps.\n
   3) BUILDROOT - that's how I built mc and htop..\n
\n
Normally - I try to compile with the first option and if that doesn't work, after hours/days/weeks of wrestling, I move to another system and see what happens there. Brutal, but true.\n
\n
That's all I can say about that really. You'll encounter many problems on your various adventures, but I
will add, that when it finally compiles, runs, and works, that's a gooood feeling..\n
\n
Good Luck!\n
\n
[ Pls let me know if anything working pops out.. ]\n
\n
" />

</ScrollView>

</LinearLayout>
